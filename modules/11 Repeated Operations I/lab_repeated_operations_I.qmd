---
title: "Lab: Repeated Oprerations I"
format:
  html:
    embed-resources: true
---

# Load packages

Remember, it's considered a best practice to load all the packages that your file will use up at the top of the file. If you have not yet installed a package, you will need to do so by running `install.packages("package name")` in the R console. For example, to install the `dplyr` package, you would run `install.packages("dplyr")`. However, you typically **do not** want to type the code to install the package here in your Quarto file because you only need to install the package once on a given computer. Not every time you run your R code.

```{r}
#| label: load-packages
library(dplyr, warn.conflicts = FALSE) # The "warn.conflicts" part is optional
library(readr)
library(stringr)
library(tidyr)
```

# Overview

This week, we will practice [writing functions](https://www.r4epi.com/writing-functions.html) and performing [column-wise repeated operations with dplyr](https://www.r4epi.com/column-wise-operations-in-dplyr.html) verbs. In some cases, we will be completing tasks that we already completed in previous modules, but we will do so using methods from this module. We will use the following data sets for all the tasks in this lab:

* [Click here to download class_survey.Rds](https://www.dropbox.com/scl/fi/pkp4soyhclbromv3spbo0/class_survey.Rds?rlkey=e956hcz3dpf3sbbmcfkqb27g2&dl=1). This is the class survey data we used in the conditional operations lab. Feel free to reuse your code from that lab for the tasks below that are repeated from that lab.

* [Click here to view the codebook for the class survey data](https://www.dropbox.com/s/kjyfq8cfur0hzdp/5313%20-%205314%20Day%20One%20Survey%20Codebook.pdf?dl=0).

# Task 1

Please download **Class Survey 5141.csv** and import it into your R global environment as **class_survey**.

```{r}
class_survey <- read_rds("/Users/bradcannell/Dropbox/Datasets/Class Survey/class_survey.Rds")
```

# Task 2

Please look at the codebook for the **class_survey** data. Several questions on the survey included a "Not Sure" response option coded as a "9". They were questions 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 20, and 26. Before analyzing this data, we will convert all of the "9" values to "NA" values. However, the very first thing we want to do is give each of those columns more informative names. Specifically, we want to rename those columns **required**, **still_enroll**, **package**, **genhealth**, **asthma**, **seatbelt**, **insurance**, **persdoc**, **hispanic**, **race**, **veteran**, **marital**, **employment**, **sex**, and **color**. We have already learned how to rename columns using the `rename()` function. 

```{r}
#| eval: false

# We could rename the columns like this, but there are some advantages to using 
# rename_with() instead.
class_survey |> 
  rename(
    required     = q2,
    still_enroll = q4,
    package      = q6,
    genhealth    = q7,
    asthma       = q9,
    seatbelt     = q10,
    insurance    = q13,
    persdoc      = q14, 
    hispanic     = q15,
    race         = q16,
    veteran      = q17, 
    marital      = q18, 
    employment   = q20, 
    sex          = q26,
    color        = q27
  )
```

However, we can also rename multiple columns at once by creating a character vector of column names and applying them using the `rename_with()` function instead. And using this method has some advantages. 

Please create a character vector containing the new column names we want to use. Please name the character vector **cols_9**. The order of the column names in this vector is important, so please use the exact order given above.

# Question 1

Which of the following code chunks will correctly create a character vector named **cols_9** that contains the new column names we want to use?

```{r}
#| eval: false

# Incorrect: This code doesn't name the vector cols_9.
new_col_names <- c(
  "required", "still_enroll", "package", "genhealth", "asthma", "seatbelt", 
  "insurance", "persdoc", "hispanic", "race", "veteran", "marital", "employment", 
  "sex", "color"
)
```

```{r}
#| eval: false

# Incorrect: This code is missing quotation marks around the column names.
cols_9 <- c(
  required, still_enroll, package, genhealth, asthma, seatbelt, 
  insurance, persdoc, hispanic, race, veteran, marital, employment, 
  sex, color
)
```

```{r}
# Correct.
cols_9 <- c(
  "required", "still_enroll", "package", "genhealth", "asthma", "seatbelt", 
  "insurance", "persdoc", "hispanic", "race", "veteran", "marital", "employment", 
  "sex", "color"
)
```

```{r}
#| eval: false

# Incorrect: This code creates a list instead of a vector.
cols_9 <- list(
  "required", "still_enroll", "package", "genhealth", "asthma", "seatbelt", 
  "insurance", "persdoc", "hispanic", "race", "veteran", "marital", "employment", 
  "sex", "color"
)
```

## Notes for students

1. In the correct code above, we created a character vector containing the names of all the columns that have a “Not Sure” response option. In the code chunk below, we will use this character vector to help rename our columns. The order of the column names in this vector is important.

2. We will also use this character vector of column names to perform the other tasks that follow. There are a couple of nice things about using this strategy. First, it reduces typing and the likelihood of making errors. Second, if we all of the sudden realized that we needed to add another column to each of the tasks we are going to perform below, we will only need to update this character vector once instead of each code chunk below separately.

# Task 3

Rename questions 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 20, and 26 to **required**, **still_enroll**, **package**, **genhealth**, **asthma**, **seatbelt**, **insurance**, **persdoc**, **hispanic**, **race**, **veteran**, **marital**, **employment**, **sex**, and **color** using the `rename_with()` function. 

## Question 2

Which of the following code chunks will correctly rename questions 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 20, and 26 to **required**, **still_enroll**, **package**, **genhealth**, **asthma**, **seatbelt**, **insurance**, **persdoc**, **hispanic**, **race**, **veteran**, **marital**, **employment**, **sex**, and **color** using the `rename_with()` function?

```{r}
# Correct.
class_survey <- class_survey |> 
  rename_with(
    .fn   = ~ cols_9,
    .cols = c(q2, q4, q6, q7, q9, q10, q13:q18, q20, q26:q27)
  )
```

```{r}
#| eval: false

# Incorrect: This code is missing the purrr-style lambda in the .fn argument.
class_survey <- class_survey |> 
  rename_with(
    .fn   = cols_9,
    .cols = c(q2, q4, q6, q7, q9, q10, q13:q18, q20, q26:q27)
  )
```

```{r}
#| eval: false

# Incorrect: This code incorrectly passes the column names to the .fn argument 
# and cols_9 to the .cols argument.
class_survey <- class_survey |> 
  rename_with(
    .fn   = c(q2, q4, q6, q7, q9, q10, q13:q18, q20, q26:q27),
    .cols = ~ cols_9
  )
```

```{r}
#| eval: false

# Incorrect: This code passes too many columns to the .cols argument.
class_survey <- class_survey |> 
  rename_with(
    .fn   = ~ cols_9,
    .cols = c(q2:q27)
  )
```

## Notes for students

1. We’ve used `rename_with()` before to apply the `str_to_lower()` function to all of our column names. However, we can pass any function to the `.fn` argument of `rename_with()`. Passing the character vector, we created earlier as an anonymous function (we wrote the anonymous function above using a purrr-style lambda) to the `.fn` argument has the effect of assigning the names in the character vector to the columns of **class_survey**. It’s very important that (1) the number column names in the character vector matches the number of columns you pass to the `.cols` argument, and (2) the order of the column names in the character vector matches the order of the columns you pass to the `.cols` argument.

# Task 4

Now, we want to coerce all of the columns with a "Not Sure" response option coded as a "9" from character type to numeric type. We could pass a separate line of code to the `mutate()` function for each column we want to coerce. Doing would look like the following code.

```{r}
#| eval: false

# Code to coerce each column of interest to numeric without using repeated 
# operations.
class_survey |> 
  mutate(
    required     = as.numeric(required), 
    still_enroll = as.numeric(still_enroll), 
    package      = as.numeric(package),
    genhealth    = as.numeric(genhealth),
    asthma       = as.numeric(asthma),
    seatbelt     = as.numeric(seatbelt),
    insurance    = as.numeric(insurance),
    persdoc      = as.numeric(persdoc), 
    hispanic     = as.numeric(hispanic),
    race         = as.numeric(race),
    veteran      = as.numeric(veteran), 
    marital      = as.numeric(marital), 
    employment   = as.numeric(employment), 
    sex          = as.numeric(sex),
    color        = as.numeric(color)
  )
```

However, the code above is more tedious to write, more difficult to maintain, more error-prone, and less concise than it needs to be. Instead, please coerce all of the columns with a "Not Sure" "Not Sure" response option coded as a "9" from character type to numeric type using the `across()` function to help remove some of the repetition from the code.

## Question 3

Which of the following code chunks will correctly coerce all of the columns with a "Not Sure" "Not Sure" response option coded as a "9" from character type to numeric type using the `across()` function?

```{r}
#| eval: false

# Incorrect. If we pass the the function name with parentheses to the .fns 
# argument, then we must also use a purrr-style lambda (~) and the special .x
# symbol.
class_survey |> 
  mutate(
    across(
      .cols = c(
        required, still_enroll, package, genhealth, asthma, seatbelt, 
        insurance, persdoc, hispanic, race, veteran, marital, employment, 
        sex, color
      ),
      .fns  = as.numeric()
    )
  )
```

```{r}
#| eval: false

# Correct.
class_survey |> 
  mutate(
    across(
      .cols = c(
        required, still_enroll, package, genhealth, asthma, seatbelt, 
        insurance, persdoc, hispanic, race, veteran, marital, employment, 
        sex, color
      ),
      .fns  = ~ as.numeric(.x)
    )
  )
```

```{r}
#| eval: false

# Correct.
class_survey |> 
  mutate(
    across(
      .cols = c(
        required, still_enroll, package, genhealth, asthma, seatbelt, 
        insurance, persdoc, hispanic, race, veteran, marital, employment, 
        sex, color
      ),
      .fns  = as.numeric
    )
  )
```

```{r}
# Correct. This also uses the cols_9 vector we created earlier.
class_survey <- class_survey |> 
  mutate(
    across(
      .cols = all_of(cols_9),
      .fns  = as.numeric 
    )
  )
```

## Notes for students

1. Using `across()` removes all of the repetition from our code, which is great. Passing the character vector of column names we previously created to the `.cols` argument (using the `all_of()` tidy-select function) makes our code even easier to read and maintain.

# Setup for Tasks 5 and 6

In previous tasks, we renamed our variables of interest and coerced them from character type to numeric type. Now, we want to start asking some questions of our data. For starters, we want to know how many participants selected "Not Sure" as their response for each variable in the **class_survey** data that included "Not Sure" as an option. 

Here is how we might have completed this task in prior modules.

```{r}
#| eval: false

class_survey |> 
  summarise(
    required_9     = sum(required == 9, na.rm = TRUE),
    still_enroll_9 = sum(still_enroll == 9, na.rm = TRUE),
    package_9      = sum(package == 9, na.rm = TRUE),
    genhealth_9    = sum(genhealth == 9, na.rm = TRUE),
    asthma_9       = sum(asthma == 9, na.rm = TRUE),
    seatbelt_9     = sum(seatbelt == 9, na.rm = TRUE),
    insurance_9    = sum(insurance == 9, na.rm = TRUE),
    persdoc_9      = sum(persdoc == 9, na.rm = TRUE), 
    hispanic_9     = sum(hispanic == 9, na.rm = TRUE),
    race_9         = sum(race == 9, na.rm = TRUE),
    veteran_9      = sum(veteran == 9, na.rm = TRUE), 
    marital_9      = sum(marital == 9, na.rm = TRUE), 
    employment_9   = sum(employment == 9, na.rm = TRUE), 
    sex_9          = sum(sex == 9, na.rm = TRUE),
    color_9        = sum(color == 99, na.rm = TRUE) # Notice that color uses 99
  )
```

Notice how much repetition is in that code! Luckily, we have already learned a few different ways to remove it. Specifically, we can create and use our own function, we can use the `across()` function, and we can combine both of these methods. We will explore all these options in the tasks that follow, beginning with writing our own function.

## Question 4

There are multiple ways we can write a function to count the number of "Not Sure" responses in our variables of interest, but all of those ways will have at least two common elements: an informative function name and the `function()` function. Because we want our function to count the number of "Not Sure" responses in our variables of interest, and because all of the "Not Sure" responses are coded as "9" or "99", `count_nines` seems like a good name for our new function. Please, fill in the blanks below to correctly create the a skeleton for our `count_nines()` function.

```{r}
#| eval: false

count_nines <- function() {
  # Function body will go here
}
```

## Question 5

Now, we want to fill in the body of our `count_nines()` function. Let's start by taking another look at the code we are trying to remove repetition from.

```{r}
#| eval: false

class_survey |> 
  summarise(
    required_9     = sum(required == 9, na.rm = TRUE),
    still_enroll_9 = sum(still_enroll == 9, na.rm = TRUE),
    package_9      = sum(package == 9, na.rm = TRUE),
    genhealth_9    = sum(genhealth == 9, na.rm = TRUE),
    asthma_9       = sum(asthma == 9, na.rm = TRUE),
    seatbelt_9     = sum(seatbelt == 9, na.rm = TRUE),
    insurance_9    = sum(insurance == 9, na.rm = TRUE),
    persdoc_9      = sum(persdoc == 9, na.rm = TRUE), 
    hispanic_9     = sum(hispanic == 9, na.rm = TRUE),
    race_9         = sum(race == 9, na.rm = TRUE),
    veteran_9      = sum(veteran == 9, na.rm = TRUE), 
    marital_9      = sum(marital == 9, na.rm = TRUE), 
    employment_9   = sum(employment == 9, na.rm = TRUE), 
    sex_9          = sum(sex == 9, na.rm = TRUE),
    color_9        = sum(color == 99, na.rm = TRUE) # Notice that color uses 99
  )
```

Recall our rule of thumb is that we want to consider writing a function when we notice that we are repeating ourselves (in code) more than twice. What elements of the code above are we repeating more than twice?

* The `sum()` function.
* The variable name `== 9` (or 99).
* The `na.rm = TRUE` argument to the `sum()` function.

## Question 6

Often, copying and pasting the repetitive part of our code into our function body is a good place to start. In this case, doing so would result in code that looks like this:

```{r}
#| eval: false

count_nines <- function() {
  sum( == 9, na.rm = TRUE)
}
```

However, the code above won't quite work. Currently, inside the `sum()` function, we are telling R that we want it to compare the value of something to 9 (i.e., `== 9`), but we don't tell it _what_ that something is. There is just a blank space. In other words, we need to fill the blank space shown here with a column name: `sum(____ == 9, na.rm = TRUE)`. But, what column name should we choose? Well, if we hard code in a column name (e.g., `sum(required == 9, na.rm = TRUE)`), then R will compare the values in the **required** column to 9 every time we run the `count_nines()` function. This isn’t a problem if the only values we care about comparing are in the **required** column, but of course, that isn’t the case. We need a way to make our function work for other columns, too. Said another way, we need to make our function more general. How can we make the `count_nines()` function more general?

* We can define a function argument that can receive input values and pass those input values into the function body.

## Question 7

Which of the following code chunks correctly defines a function argument that can receive input values and pass those input values into the function body?

```{r}
#| eval: false

# Incorrect. This code doesn't define any function arguments inside the function() function.
count_nines <- function() {
  sum(column == 9, na.rm = TRUE)
}
```

```{r}
#| eval: false

# Correct. 
count_nines <- function(column) {
  sum(column == 9, na.rm = TRUE)
}
```

```{r}
#| eval: false

# Incorrect. This code defines an argument in the function() function named "column". However, the value passed to the column argument isn't passed into the function body. To do so, we would need to replace the "x" in the function body with the word "column".
count_nines <- function(column) {
  sum(x == 9, na.rm = TRUE)
}
```

```{r}
#| eval: false

# Incorrect. This code defines an argument in the function() function named "x". However, the value passed to the x argument isn't passed into the function body. To do so, we would need to replace the word "column" in the function body with an "x". 
count_nines <- function(x) {
  sum(column == 9, na.rm = TRUE)
}
```

## Question 8

We are almost done creating a function we can use to remove repetition from our code. There's just one problem remaining. Currently, we can pass the name of any column to the `count_nines()` function, which will return the number of rows with a value of 9. However, we already saw that one column uses the value 99 to represent "Not Sure" responses. So, we will need to adjust the code in the function body to account for that.

Which of the following code chunks correctly adjusts the `count_nines()` function so that it will count the number of rows that contain a 99 as well as the number of rows that contain a 9?

```{r}
#| eval: false

# Incorrect. We can't use the literal word "OR" as a logical operator in R. R uses the pipe character instead.
count_nines <- function(column) {
  sum(column == 9 OR column == 99, na.rm = TRUE)
}
```

```{r}
#| eval: false

# Incorrect. We can't use the literal word "AND" as a logical operator in R. R uses the ampersand sign instead. Additionally, the and logical operator would return TRUE only if the value of column is 9 AND 99. Of course, it can never be both values at the same time, so the logical statement column == 9 & column == 99 would always return false.
count_nines <- function(column) {
  sum(column == 9 AND column == 99, na.rm = TRUE)
}
```

```{r}
#| eval: true

# Correct. 
count_nines <- function(column) {
  sum(column == 9 | column == 99, na.rm = TRUE)
}
```

```{r}
#| eval: false

# Incorrect. The "&" logical operator would return TRUE only if the value of column is 9 AND 99. Of course, it can never be both values at the same time, so the logical statement column == 9 & column == 99 would always return false. We need to use the logical "or" operator instead. 
count_nines <- function(column) {
  sum(column == 9 & column == 99, na.rm = TRUE)
}
```

# Task 5

Please calculate the number of participants who selected "Not Sure" as their response for each variable in the **class_survey** data that included "Not Sure" as an option using the `count_nines()` function we previously created.

```{r}
# Use the count_nines function to reduce the amount of repetitive code.
class_survey |> 
  summarise(
    required_9     = count_nines(required),
    still_enroll_9 = count_nines(still_enroll),
    package_9      = count_nines(package),
    genhealth_9    = count_nines(genhealth),
    asthma_9       = count_nines(asthma),
    seatbelt_9     = count_nines(seatbelt),
    insurance_9    = count_nines(insurance),
    persdoc_9      = count_nines(persdoc), 
    hispanic_9     = count_nines(hispanic),
    race_9         = count_nines(race),
    veteran_9      = count_nines(veteran), 
    marital_9      = count_nines(marital), 
    employment_9   = count_nines(employment), 
    sex_9          = count_nines(sex),
    color_9        = count_nines(color) 
  )
```

## Question 9

How many participants selected "Not Sure" as their response for the question that corresponds to the **still_enroll_9** column?

* 7 participants selected "Not Sure" as their response for the question that corresponds to the **still_enroll_9** column.

# Task 6

We using the `count_nines()` function in the code below to reduced some of the repetition that was in our previous code. 

```{r}
#| eval: false

class_survey |> 
  summarise(
    required_9     = count_nines(required),
    still_enroll_9 = count_nines(still_enroll),
    package_9      = count_nines(package),
    genhealth_9    = count_nines(genhealth),
    asthma_9       = count_nines(asthma),
    seatbelt_9     = count_nines(seatbelt),
    insurance_9    = count_nines(insurance),
    persdoc_9      = count_nines(persdoc), 
    hispanic_9     = count_nines(hispanic),
    race_9         = count_nines(race),
    veteran_9      = count_nines(veteran), 
    marital_9      = count_nines(marital), 
    employment_9   = count_nines(employment), 
    sex_9          = count_nines(sex),
    color_9        = count_nines(color) 
  )
```

However, there is some remaining repetition that we can eliminate. Please use the `across()` function to apply the `count_nines()` function and calculate the number of participants who selected "Not Sure" as their response for each variable in the **class_survey** data that included "Not Sure" as an option.

## Question 10

Which of the following code chunks correctly uses the `across()` function to apply the `count_nines()` function and calculate the number of participants who selected "Not Sure" as their response for each variable in the **class_survey** data that included "Not Sure" as an option?

```{r}
# Correct.
class_survey |> 
  summarise(
    across(
      .cols = all_of(cols_9),
      .fns  = count_nines
    )
  )
```

```{r}
#| eval: false

# Incorrect. This code uses an anonymous function instead of the count_nines() function. It works, so there's nothing wrong with this code, per se, but it is incorrect for the purposes of this question because it doesn't specifically use the count_nines() function.
class_survey |> 
  summarise(
    across(
      .cols = all_of(cols_9),
      .fns  = function(x) { 
        sum(x == 9 | x == 99, na.rm = TRUE)
      }
    )
  )
```

```{r}
#| eval: false

# Incorrect. This will return an error. We must pass the function name only (i.e., "count_nines" without parentheses) to the .fns argument, or we must use the purrr-style lambda syntax.
class_survey |> 
  summarise(
    across(
      .cols = all_of(cols_9),
      .fns  = count_nines()
    )
  )
```

```{r}
# Correct.
class_survey |> 
  summarise(
    across(
      .cols = all_of(cols_9),
      .fns  = ~ count_nines(.x)
    )
  )
```

## Question 11

At this point, we've removed all of the repetition from the original code we used to count the number of "Not Sure" responses in our variables of interest. However, the results would be easier to work with if they were in long form instead of wide form. 

To start that process, please change the .names argument in the code below so that the column names in our results data frame all end with “_n_not_sure”. Please assign the results data frame the name **not_sure_count**.

```{r}
#| eval: false

not_sure_count <- class_survey |> 
  summarise(
    across(
      .cols  = all_of(cols_9),
      .fns   = count_nines,
      .names = ____
    )
  )
```

Which of the following lines of code will correctly append "_n_not_sure" to the column names in our results data frame when added to the `.names` argument of the code above?

```{r}
# Correct
not_sure_count <- class_survey |> 
  summarise(
    across(
      .cols  = all_of(cols_9),
      .fns   = count_nines,
      .names = "{col}_n_not_sure" # Using a hyphen here makes the next task easier
    )
  )
```

## Question 12

Please restructure **not_sure_count** so that it has two columns. The first column should contain each column name from **class_survey** that we have been analyzing. The second column of **not_sure_count** should contain the number of "Not Sure" responses for each column name from **class_survey** that we have been analyzing.

Please select the function name that will correctly complete the code chunk below. 

```{r}
#| eval: false

not_sure_count |> 
  _____ (
    cols          = everything(),
    names_to      = "column",
    names_pattern = "(\\w+)_n_not_sure",
    values_to     = "n_not_sure"
  ) |> 
  arrange(desc(n_not_sure))
```

```{r}
#| rows.print: 15

not_sure_count |> 
  pivot_longer(
    cols          = everything(),
    names_to      = "column",
    names_pattern = "(\\w+)_n_not_sure",
    values_to     = "n_not_sure"
  ) |> 
  arrange(desc(n_not_sure))
```

## Question 13

Which column in the **class_survey** data frame contains the greatest number of "Not Sure" responses?

* The **package** column contains the greatest number of Not Sure responses (n = 14).

# Task 7

Please recode all "Not Sure" responses in the **class_survey** data frame to missing. 

```{r}
class_survey <- class_survey |> 
  mutate(
    across(
      .cols = all_of(cols_9),
      .fns  = ~ if_else(.x == 9 | .x == 99, NA_real_, .x) 
    )
  )
```

## Question 14

Which column in the **class_survey** data frame contains the greatest number of missing values?

```{r}
class_survey |> 
  summarise(
    across(
      .cols = all_of(cols_9),
      .fns  = ~ sum(is.na(.x))
    )
  ) |> 
  pivot_longer(
    cols      = everything(),
    names_to  = "column",
    values_to = "n_missing"
  ) |> 
  arrange(desc(n_missing))
```

* The **still_enroll** column contains the greatest number of missing values (n = 21).

# Task 8

There are six variables in the **class_survey** data frame that have "Yes" and "No" as response options. They are **required**, **still_enroll**, **asthma**, **insurance**, **hispanic**, and **veteran**. Please create new factor versions of each of these variables. Please use the `across()` function to help you remove some of the repetition from your code. Please also use the “_f” variable naming convention.

```{r}
yn_cols <- c("required", "still_enroll", "asthma", "insurance", "hispanic", "veteran")
```

```{r}
class_survey <- class_survey |> 
  mutate(
    across(
      .cols  = all_of(yn_cols),
      .fns   = ~ factor(.x, 0:1, c("No", "Yes")),
      .names = "{col}_f"
    )
  )
```

## Question 15

How many people reported that they have ever been told by a doctor, nurse, or other health professional that they have asthma?

```{r}
class_survey |> 
  count(asthma_f)
```

* Nine people reported that they have ever been told by a doctor, nurse, or other health professional that they have asthma.

## Notes for students

1. Some of you may be wondering if we can use `across()` to apply `count()` to all the yes/no factor variables in one code chunk. Unfortunately, that isn't currently possible. As of this writing, we will need to use a for loop or the `purrr` package to repeatedly apply the `count()` function across more than one column in our data frame.
